name: E2E
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  maestro-ios:
    runs-on: macos-latest
    timeout-minutes: 60
    permissions:
      checks: read
      contents: read
    concurrency:
      group: ${{ github.workflow_ref }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Calculate fingerprint
        id: calculate-fingerprint
        run: |
          FINGERPRINT=$(npx expo-updates fingerprint:generate --platform ios | jq -r '.hash')
          echo "Fingerprint for iOS: $FINGERPRINT"
          echo "fingerprint=$FINGERPRINT" >> $GITHUB_OUTPUT
        working-directory: example

      - name: Restore debug build from cache
        id: restore-debug-build
        uses: actions/cache/restore@v4
        with:
          path: ios-debug-build/
          key: ios-debug-build-${{ steps.calculate-fingerprint.outputs.fingerprint }}

      - name: Use appropriate Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Build iOS App
        if: steps.restore-debug-build.outputs.cache-hit != 'true'
        run: |
          yarn expo prebuild --platform ios
          xcodebuild ONLY_ACTIVE_ARCH=YES -workspace ios/ReactNavigation.xcworkspace -UseNewBuildSystem=YES -scheme ReactNavigation -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build -quiet
        working-directory: example

      - name: Prepare cache folder
        if: steps.restore-debug-build.outputs.cache-hit != 'true'
        run: |
          mkdir ios-debug-build
          mv example/ios/build/Build/Products/Debug-iphonesimulator/ReactNavigation.app ios-debug-build/ios-debug.app

      - name: Store debug build in cache
        if: steps.restore-debug-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ios-debug-build/
          key: ${{ steps.restore-debug-build.outputs.cache-primary-key }}

      - name: Install macOS dependencies
        run: |
          brew tap facebook/fb
          brew install facebook/fb/idb-companion

      - name: Install Maestro
        run: |
          curl -fsSL "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
        env:
          MAESTRO_VERSION: 1.41.0

      - name: Boot iOS Simulator
        run: |
          SIMULATOR_NAME="iPhone 16"
          DEVICE_ID=$(xcrun simctl list devices available | grep "$SIMULATOR_NAME" | head -n 1 | awk -F "[()]" '{print $2}')

          if [ -z "$DEVICE_ID" ]; then
            echo "No available simulator found for the criteria."
            xcrun simctl list devices available
            exit 1
          fi

          echo "Booting $SIMULATOR_NAME simulator with DEVICE_ID=$DEVICE_ID..."
          xcrun simctl boot "$DEVICE_ID" || true

          TIMEOUT=120
          START_TIME=$(date +%s)
          echo "Waiting for simulator to boot..."

          while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

            if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
              echo "Timeout: simulator failed to boot for $TIMEOUT seconds."
              exit 1
            fi

            STATUS=$(xcrun simctl list | grep "$DEVICE_ID" | grep "(Booted)")
            if [[ -n "$STATUS" ]]; then
              echo "Simulator is booted!"
              break
            else
              echo "Still waiting for the simulator to boot..."
              sleep 5
            fi
          done

          # Add deep link handler so we don't see a prompt when running tests
          /usr/libexec/PlistBuddy ~/Library/Developer/CoreSimulator/Devices/${DEVICE_ID}/data/Library/Preferences/com.apple.launchservices.schemeapproval.plist -c "add com.apple.CoreSimulator.CoreSimulatorBridge-->rne string org.reactnavigation.playground"

      - name: Run Metro bundler in the background
        uses: miguelteixeiraa/action-run-in-background@v1
        with:
          script: yarn --cwd example start
          readiness-script: |
            if curl -sSf "http://localhost:8081/.expo/.virtual-metro-entry.bundle?platform=ios&dev=true&minify=false" > /dev/null; then
              echo "curl request to metro was successful."
            else
              echo "curl request to metro failed."
              exit 1
            fi

      - name: Run Maestro tests
        run: |
          xcrun simctl install booted ../ios-debug-build/ios-debug.app
          yarn run e2e:native
        env:
          MAESTRO_DRIVER_STARTUP_TIMEOUT: 240000
        working-directory: example

      - name: Store debug output if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-debug-output-ios
          path: example/maestro-debug-output/**/*
          include-hidden-files: true
          overwrite: true
