name: Expo Preview
on:
  pull_request:

jobs:
  publish:
    name: Install and publish
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.owner.login == 'react-navigation'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup Expo
        uses: expo/expo-github-action@v6
        with:
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Publish Expo app
        working-directory: ./example
        run: yarn expo-cli publish --release-channel=pr-${{ github.event.number }}
        env:
          EXPO_USE_DEV_SERVER: true

      - name: Get expo link
        id: expo
        run: echo "::set-output name=path::@react-navigation/react-navigation-example?release-channel=pr-${{ github.event.number }}"

      - name: Comment on PR
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const body = 'The Expo app for the example from this branch is ready!\n\n[expo.dev/${{ steps.expo.outputs.path }}](https://expo.dev/${{ steps.expo.outputs.path }})\n\n<a href="https://exp.host/${{ steps.expo.outputs.path }}"><img src="https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=exp://exp.host/${{ steps.expo.outputs.path }}" height="200px" width="200px"></a>';

            const comments = await github.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            if (comments.data.some(comment => comment.body === body)) {
              return;
            }

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
